下面是对「vscode 开发插件」Day1 笔记的整理与归纳：
一、项目初始化与结构
使用脚手架
通过 npm install -g yo generator-code 创建工程 ai-review-tool
理解生成的目录结构：核心在 extension 目录，命令在 package.json 的 contributes.commands 中注册
学习参考
B 站 & GitHub 上的 VSCode 插件开发教程与示例，不断优化提示词（Prompt）
二、运行与调试
编译：根据 tsconfig.json 将源码编译到 dist 文件夹
调试：在 VSCode 中按 F5 启动，建议用类似 @ai-review-tool 运行这个项目 的提示词触发
三、Prompt 驱动文档生成
常用 Prompt：
“向我输出一个文档介绍实现的原理、实现代码设计和代码结构，以及遇到的问题和解决方法。”
生成的 DEVELOPMENT.md 开发文档，可作为架构与设计记录
四、详细需求清单
交互
在编辑器选中文本后，右键菜单中新增「代码审查」选项
触发后生成同名（或相似名）新文件，内容为优化后的代码与改进建议
核心功能
调用第三方 AI API（OpenAI GPT-4 Turbo）实现自动代码审查、质量反馈与改进建议
代码分层清晰、职责单一
技术栈
TypeScript 实现，关键逻辑处添加注解以便阅读
输出文档
自动生成一份包含原理、设计、结构及问题解决方案的文档
五、已知问题与思考
编译后大量红字报错（需排查类型／路径／依赖配置）
交互方案设计（参考同类插件 Codiga）
AI API 选型
寻找免费可调试的模型（如混元大模型、Huggingface 等）
结合业务痛点
将审查工具当作「可高度配置的规则引擎」，先从安全、算法、性能等核心痛点入手
六、核心 Prompt 示例
通用规则检查：
“对所有涉及折扣逻辑的代码，检查边界值（负折扣、超大折扣）、日志接入、幂等性；若缺少单元测试，请标注。”
安全审计场景：
“若发现直接拼接 SQL，输出‘SQL 注入 风险’，并给出 parameterized query 范例。”

 输出Prompt给Review Bot定义规则、痛点（安全、算法、性能）



提示词：
接下来是更详细的需求，详细列出要做的事项，包括：
1. 用npm install -g yo generator-code创建工程ai-review-tool。
2. 工程中具体要改动哪些配置（要显示完整的改动部分）。

下面是这个插件的基本需求：
1. 在当前文档中选中需要的代码，点击鼠标右键在弹出的菜单中增加代码审查的选项。
2. 选择代码审查的选项后，生成新的名字相似的文件，文件里面就是优化后的代码，以及代码改进建议。
3. 核心功能“利用AI技术自动审查代码，提供代码质量反馈和改进建议”我希望用采用第三方AI API集成：OpenAI GPT-4 Turbo 实现，并有合理的代码分层结构
4. 我希望用TypeScript， 在关键部分有注解以便我能更快的看懂。
5. 向我输出一个文档介绍实现的原理，实现代码设计和代码结构，以及遇到的问题和解决方法。

